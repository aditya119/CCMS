@page "/Case/Details"
@layout CaseLayout
@using CCMS.Shared.Models.CourtCaseModels
@using CCMS.Shared.Models.CaseTypeModels
@using CCMS.Shared.Models.CourtModels
@using CCMS.Shared.Models.LocationModels
@using CCMS.Shared.Models.LawyerModels
@inject ConfigClient _configClient
@inject CaseClient _caseClient
@inject ICaseIdHandler _caseIdHandler
@inject IToastService _toast
@implements IDisposable

<div class="col-md-8">
    <EditForm EditContext="@editContext" OnValidSubmit="@SaveDetails">
        <DataAnnotationsValidator />
        <fieldset class="form-group required" disabled="@isDisabled">
            <label class="font-weight-bold" for="dropDownCaseType">Case Type</label>
            <InputSelectNumber class="form-control"
                               @bind-Value="caseDetails.CaseTypeId"
                               id="dropDownCaseType"
                               required>
                @if (caseTypes != null)
                {
                    foreach (var caseType in caseTypes)
                    {
                        <option value="@caseType.CaseTypeId">@caseType.CaseTypeName</option>
                    }
                }
            </InputSelectNumber>
        </fieldset>
        <fieldset class="form-group required" disabled="@isDisabled">
            <label class="font-weight-bold" for="dropDownCourt">Court</label>
            <InputSelectNumber class="form-control"
                               @bind-Value="caseDetails.CourtId"
                               id="dropDownCourt"
                               required>
                @if (courts != null)
                {
                    foreach (var court in courts)
                    {
                        <option value="@court.CourtId">@court.CourtName</option>
                    }
                }
            </InputSelectNumber>
        </fieldset>
        <fieldset class="form-group required" disabled="@isDisabled">
            <label class="font-weight-bold" for="dropDownLocations">Location</label>
            <InputSelectNumber class="form-control"
                               @bind-Value="caseDetails.LocationId"
                               id="dropDownLocations"
                               required>
                @if (locations != null)
                {
                    foreach (var location in locations)
                    {
                        <option value="@location.LocationId">@location.LocationName</option>
                    }
                }
            </InputSelectNumber>
        </fieldset>
        <fieldset class="form-group required" disabled="@isDisabled">
            <label class="font-weight-bold" for="dropDownLawyers">Lawyer</label>
            <InputSelectNumber class="form-control"
                               @bind-Value="caseDetails.LawyerId"
                               id="dropDownLawyers"
                               required>
                @if (lawyers != null)
                {
                    foreach (var lawyer in lawyers)
                    {
                        <option value="@lawyer.LawyerId">@lawyer.LawyerNameAndEmail</option>
                    }
                }
            </InputSelectNumber>
        </fieldset>
        <input type="submit"
               class="btn btn-primary"
               value="Save"
               disabled="@isDisabled" />
    </EditForm>
</div>

@code {
    private NewCaseModel caseDetails = new();
    private EditContext editContext;

    private CaseIdentityModel caseIdentity;
    private IEnumerable<CaseTypeDetailsModel> caseTypes;
    private IEnumerable<CourtDetailsModel> courts;
    private IEnumerable<LocationDetailsModel> locations;
    private IEnumerable<LawyerListItemModel> lawyers;

    private bool isDisabled = true;

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(caseDetails);
        await Task.WhenAll(LoadCaseTypes(), LoadCourts(), LoadLocations(), LoadLawyers());
        caseIdentity = await _caseIdHandler.RetrieveCaseDetailsAsync();
        if (caseIdentity.CaseId != -1)
        {
            caseDetails = await _caseClient.GetCaseDetailsAsync(caseIdentity.CaseId);
        }
        isDisabled = false;
    }

    void IDisposable.Dispose()
    {
        if (editContext.Validate())
        {
            Task task = SaveDetails();
            task.Wait(1000);
        }
    }

    private async Task SaveDetails()
    {
        isDisabled = true;
        HttpResponseMessage response;

        caseDetails.CaseNumber = caseIdentity.CaseNumber;
        caseDetails.AppealNumber = caseIdentity.AppealNumber;
        if (caseIdentity.CaseId == -1)
        {
            response = await _caseClient.AddNewCaseAsync(caseDetails);
        }
        else
        {
            UpdateCaseModel updatedDetails = new(caseDetails, caseIdentity.CaseId);
            response = await _caseClient.UpdateCaseAsync(updatedDetails);
        }

        if (response.IsSuccessStatusCode)
        {
            _toast.ShowSuccess("Case details saved");
            caseIdentity.CaseId = await _caseClient.GetCaseIdAsync(caseIdentity.CaseNumber, caseIdentity.AppealNumber);
            await _caseIdHandler.StoreCaseDetailsAsync(caseIdentity);
        }
        else
        {
            _toast.ShowError(await response.Content.ReadAsStringAsync(), response.StatusCode.ToString());
        }
        isDisabled = false;
    }

    private async Task LoadCaseTypes()
    {
        caseTypes = await _configClient.GetAllCaseTypesAsync();
    }

    private async Task LoadCourts()
    {
        courts = await _configClient.GetAllCourtsAsync();
    }

    private async Task LoadLocations()
    {
        locations = await _configClient.GetAllLocationsAsync();
    }

    private async Task LoadLawyers()
    {
        lawyers = await _configClient.GetAllLawyersAsync();
    }
} 